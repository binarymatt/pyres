import sys
import traceback

class BaseBackend(object):
    """Provides a base class that custom backends can subclass. Also provides basic
    traceback and message parsing.
    """
    def __init__(self, exp, queue, payload, worker=None):
        """
        :param exp: The exception generated by your failure
        :type exp: Exception
        :param queue: The name of the queue in which the :class:`Job`
                      was enqueued when it failed.
        :type queue: string
        :param payload: The payload that was passed to the :class:`Job`
        :type payload: dict
        :param worker: The worker that was processing the :class:`Job`
                       when it failed.
        :type worker: :class:`Worker` subclass

        """
        excc = sys.exc_info()[0]

        self._exception = excc
        try:
            self._traceback = traceback.format_exc()
        except AttributeError:
            self._traceback = None

        self._worker = worker
        self._queue = queue
        self._payload = payload

    def _parse_traceback(self, trace):
        """Return the given traceback string formatted for a notification.
        :param trace: The traceback of an exception
        :type trace: str
        """
        if not trace:
            return []

        return trace.split('\n')

    def _parse_message(self, exc):
        """Return a message for a notification from the given exception.
        :param exc: An exception to create a message for
        :type exc: Exception
        """
        return '%s: %s' % (exc.__class__.__name__, str(exc))

